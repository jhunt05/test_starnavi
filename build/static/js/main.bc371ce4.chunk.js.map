{"version":3,"sources":["redux/actions.js","components/HandleFormatDate.js","redux/reducer.js","components/Panel.js","components/GameBoard.js","components/WinnersTable.js","components/Game.js","components/GameContainer.js","App.js","index.js"],"names":["ACTIONS","LOAD_SETTINGS","LOAD_WINNERS","ADD_WINNER","SET_USERNAME","fetchSettings","dispatch","getState","fetch","then","response","json","responseJson","settings","type","payload","fetchWinners","winners","formatDate","date","hour","getHours","minutes","getMinutes","day","getDate","monthIndex","getMonth","year","getFullYear","initialState","userName","loading","error","Panel","props","onInputChange","gameMode","onSelectChange","game","startPlaying","getTimerId","squares","className","value","onChange","required","disabled","placeholder","event","target","onClick","preventDefault","winnerLabel","document","querySelector","btn","select","input","resetBtn","style","opacity","display","backgroundColor","timerId","setInterval","delay","alert","GameBoard","chooseBtn","querySelectorAll","length","getSquares","prevProps","this","btnSettings","resetField","buttons","Array","field","fill","map","button","index","key","React","Component","WinnersTable","winnersToDisplay","slice","item","winner","id","Game","setState","isPlaying","sendWinnerToServer","method","headers","body","JSON","stringify","Date","success","catch","console","state","random","Math","floor","getSettings","resetGame","playBtn","clearInterval","innerHTML","addEventListener","setTimeout","rand","userScore","pcScore","push","addWinner","chooseWinner","easyMode","normalMode","hardMode","setName","GameContainer","connect","bindActionCreators","name","store","createStore","action","newWinner","applyMiddleware","thunk","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bc371ce4.chunk.js","sourcesContent":["export const ACTIONS = {\n  LOAD_SETTINGS: 'LOAD_SETTINGS',\n  LOAD_WINNERS: 'LOAD_WINNERS',\n  ADD_WINNER: 'ADD_WINNER',\n  SET_USERNAME: 'SET_USERNAME',\n};\n\nexport function loadSettings(settings) {\n  return {\n    type: ACTIONS.LOAD_SETTINGS,\n    payload: settings\n  };\n};\n\nexport function loadWinners(winners) {\n  return {\n    type: ACTIONS.LOAD_WINNERS,\n    payload: winners\n  };\n};\n\nexport function addWinner(name) {\n  return {\n    type: ACTIONS.ADD_WINNER,\n    payload: name\n  }\n};\n\nexport function setUsername(name) {\n  return {\n    type: ACTIONS.SET_USERNAME,\n    payload: name,\n  };\n};\n\nexport const fetchSettings = () => (dispatch, getState) => {\n  return fetch('https://starnavi-frontend-test-task.herokuapp.com/game-settings')\n    .then(response => response.json())\n    .then(responseJson => {\n      dispatch(loadSettings(responseJson));\n    })\n};\n\nexport const fetchWinners = () => (dispatch, getState) => {\n  return fetch('https://starnavi-frontend-test-task.herokuapp.com/winners')\n    .then(response => response.json())\n    .then(responseJson => {\n      dispatch(loadWinners(responseJson));\n    })\n};","function formatDate(date) {\n  const monthNames = [\n    \"January\", \"February\", \"March\",\n    \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\",\n    \"November\", \"December\"\n  ];\n\n  let hour = date.getHours();\n  let minutes = date.getMinutes();\n  let day = date.getDate();\n  let monthIndex = date.getMonth();\n  let year = date.getFullYear();\n\n  if (minutes < 10) {\n    minutes = '0' + minutes;\n  }\n\n  return `${hour}:${minutes} ${day} ${monthNames[monthIndex]} ${year}`;\n}\n\nexport {formatDate};","import {ACTIONS} from './actions';\nimport {formatDate} from '../components/HandleFormatDate';\n\nconst initialState = {\n  settings: [],\n  winners: [],\n  userName: '',\n  loading: false,\n  error: null\n}\n\nfunction addWinner(name) {\n  return {\n    'winner': name,\n    'date': formatDate(new Date()),\n    'id': Math.random(),\n  }\n}\n\nexport function reducer(state = initialState, action) {\n  switch(action.type) {\n    case ACTIONS.LOAD_SETTINGS: \n      return {\n        ...state,\n        loading: false,\n        settings: action.payload,\n      }\n    case ACTIONS.LOAD_WINNERS: \n      return {\n        ...state,\n        loading: false,\n        winners: action.payload,\n      }\n    case ACTIONS.SET_USERNAME: \n    return {\n      ...state,\n      userName: action.payload,\n    }\n    case ACTIONS.ADD_WINNER:\n      let newWinner = addWinner(action.payload);\n      return {\n        ...state,\n        winners: [...state.winners, newWinner],\n      }\n    default:\n      return state;\n  }\n}","import React from 'react';\n\nfunction Panel(props) {\n  const {\n    onInputChange,\n    gameMode,\n    onSelectChange,\n    game,\n    settings,\n    userName,\n    startPlaying,\n    getTimerId,\n    squares\n  } = props;\n\n  const gameStart = (event) => {\n    event.preventDefault();\n    startPlaying();\n\n    const winnerLabel = document.querySelector('.winner');\n    const btn = document.querySelector('.ui.button');\n    const select = document.querySelector('.select');\n    const input = document.querySelector('.input');\n    const resetBtn = document.querySelector('.ui.reset');\n\n    if (userName && gameMode !== \"Pick game mode\") {\n      btn.disabled = 'true';\n      select.disabled = 'true';\n      input.disabled = 'true';\n      winnerLabel.style.opacity = 0;\n      resetBtn.style.display = 'none';\n\n      for (let square of squares) {\n        square.style.backgroundColor = '#f3f3f3';\n      }\n    \n      let timerId = setInterval(game, settings.delay);\n      getTimerId(timerId);\n    } else {\n      alert('Enter info')\n    }\n\n    return;\n  }  \n\n  return (\n    <form className=\"gameForm\">\n      <select\n        value={gameMode}\n        onChange={onSelectChange}\n        required\n        className=\"select\"\n      >\n        <option value=\"Pick game mode\" disabled>Pick game mode</option>\n        <option value=\"Easy\">Easy</option>\n        <option value=\"Medium\">Medium</option>\n        <option value=\"Hard\">Hard</option>\n      </select>\n\n      <input \n        className=\"input\"\n        required\n        type=\"text\" \n        placeholder=\"Enter your name\"\n        onChange={(event) => onInputChange(event.target.value)}\n      />\n\n      <button \n        type=\"submit\" \n        onClick={gameStart}\n        className=\"ui button\"\n      >\n        Play\n      </button>\n    </form>\n  );\n}\n\nexport default Panel;","import React from 'react';\n\nclass GameBoard extends React.Component {\n  componentDidUpdate(prevProps) {\n    if (this.props.squares === prevProps.squares) {\n      this.chooseBtn();\n    } else {\n      return;\n    }\n  }\n\n  chooseBtn = () => {\n    let btn = document.querySelectorAll('.boardBtn');\n\n    if (btn.length !== 0) {\n      this.props.getSquares(btn);\n    } \n  }\n\n  render() {\n    const {btnSettings, resetField} = this.props;\n    let buttons = Array(btnSettings.field).fill(null);\n\n    switch(btnSettings.field) {\n      case 5: \n        return (\n          <div className=\"gameBoard\">\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <button onClick={resetField} className=\"reset ui button\">Reset field</button>\n          </div>\n        );\n      case 10: \n        return (\n          <div className=\"gameBoard\">\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <button onClick={resetField} className=\"reset ui button\">Reset field</button>\n          </div>\n        );\n      case 15: \n        return (\n          <div className=\"gameBoard\">\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <button onClick={resetField} className=\"reset ui button\">Reset field</button>\n          </div>\n        );\n      default: \n        return <span className=\"startGameSpan\">Enter info to start a game</span>\n    }\n  }\n}\n\nexport default GameBoard;","import React from 'react';\n\nconst WinnersTable = (props) => {\n  const {winners} = props;\n  const winnersToDisplay = winners.slice(-4);\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"rules\">\n        <details>\n          <summary className=\"ui inverted button\">Rules</summary>\n          <div className=\"ui card\">\n            <p>Click on square, if he's highlighted blue. If you managed to click during time -\n              square will become green and you will get the point, if not - square will turns red and\n              the point will go to computer. When 50% of field will be green or red, game will stop\n            </p>\n          </div>\n        </details>\n      </div>\n      <div className=\"leadersTable\">\n        <h2>Leader Board</h2>\n        <table className=\"ui celled table\">\n          <tbody>\n            {winnersToDisplay.map(item => (\n              <tr \n                className={item.winner === \"Computer\" ? \"negativeResult\" : \"positiveResult\"} \n                key={item.id}\n              >\n                <td>{item.winner}</td>\n                <td>{item.date}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default WinnersTable;","import React from 'react';\nimport Panel from './Panel';\nimport GameBoard from './GameBoard';\nimport WinnersTable from './WinnersTable';\nimport {formatDate} from './HandleFormatDate';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gameMode: 'Pick game mode',\n      isPlaying: false,\n      squares: [],\n      winner: null,\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchSettings();\n    this.props.fetchWinners();\n  }\n\n  onSelectChange = (event) => {\n    this.setState({\n      gameMode: event.target.value,\n    })\n  }\n\n  startPlaying = () => {\n    this.setState({\n      isPlaying: true,\n    })\n  }\n\n  getTimerId = (id) => {\n    this.setState({\n      timerId: id,\n    });\n  }\n\n  sendWinnerToServer = (userName) => {\n    return fetch('https://starnavi-frontend-test-task.herokuapp.com/winners', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        winner: userName,\n        date: formatDate(new Date()),\n      })\n    }).then((response) => response.json())\n      .then((responseJson) => {\n        return responseJson.success;\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  game = () => {\n    const { squares } = this.state;\n    let buttons = [...squares];\n    let random = Math.floor(Math.random() * buttons.length);\n    const settings = this.getSettings();\n\n    const rand = (buttons) => {  \n      buttons[random].style.backgroundColor = 'blue';    \n      buttons[random].addEventListener('click', () => {\n        buttons[random].style.backgroundColor = 'green';\n      })\n  \n      setTimeout(() => {\n        if (buttons[random].style.backgroundColor === 'blue') {\n          buttons[random].style.backgroundColor = 'red';\n          buttons[random].disabled = 'true';\n        }\n      }, settings.delay);\n    }\n\n    const resetGame = () => {\n      const playBtn = document.querySelector('.ui.button');\n      const select = document.querySelector('.select');\n      const input = document.querySelector('.input');\n      const winnerLabel = document.querySelector('.winner');\n      const resetBtn = document.querySelector('.ui.reset');\n\n      winnerLabel.style.opacity = 1;\n      resetBtn.style.display = 'block';\n      clearInterval(this.state.timerId);\n      playBtn.innerHTML = 'Play again';\n      playBtn.disabled = false;\n      select.disabled = false;\n      input.disabled = false;\n    }\n    \n    const chooseWinner = (buttons) => {\n      let userScore = [];\n      let pcScore = [];\n      const {userName} = this.props;\n  \n      for (let button of buttons) {\n        if (button.style.backgroundColor === 'green') {\n          userScore.push(1);\n        } else if (button.style.backgroundColor === 'red') {\n          pcScore.push(1);\n        }\n      }\n  \n      if (userScore.length >= buttons.length / 2) {\n        this.props.addWinner(userName);\n        this.setState({\n          isPlaying: false,\n          winner: userName,\n        })\n        this.sendWinnerToServer(userName);\n        resetGame();\n      } else if (pcScore.length >= buttons.length / 2) {\n        this.props.addWinner('Computer');\n        this.setState({\n          isPlaying: false,\n          winner: 'Computer',\n        })\n        this.sendWinnerToServer('Computer');\n        resetGame();\n      } else {\n        return;\n      }\n    }\n    \n    if (buttons[random].style.backgroundColor === 'blue' ||\n        buttons[random].style.backgroundColor === 'red' ||\n        buttons[random].style.backgroundColor === 'green') {\n          return;\n    } else if (this.state.isPlaying) {\n      rand(buttons);\n      chooseWinner(buttons);\n    }\n\n    this.setState({\n      squares: buttons,\n    })\n  };\n\n  getSquares = (btn) => {\n    this.setState({\n      squares: btn,\n    })\n  }\n\n  resetField = () => {\n    const { squares } = this.state;\n    let buttons = [...squares];\n\n    for (let button of buttons) {\n      button.style.backgroundColor = '#f3f3f3';\n    }\n  }\n\n  getSettings = () => {\n    switch(this.state.gameMode) {\n      case \"Easy\": \n        return this.props.settings.easyMode\n      case \"Medium\": \n        return this.props.settings.normalMode\n      case \"Hard\": \n        return this.props.settings.hardMode\n      default:\n        return {\n          field: 0,\n          delay: 0,\n        }\n    }\n  }\n      \n  render() {\n    const { \n      userName, \n      winners, \n      setName,\n    } = this.props;\n\n    return (\n      <div className=\"container\">\n        <div className=\"game\">\n          <Panel \n            onInputChange={setName} \n            gameMode={this.state.gameMode}\n            onSelectChange={this.onSelectChange}\n            game={this.game}\n            settings={this.getSettings()} \n            userName={userName}\n            isPlaying={this.state.isPlaying}\n            startPlaying={this.startPlaying}\n            getTimerId={this.getTimerId}\n            squares={this.state.squares}\n          />\n\n          <span className=\"winner\">\n            {this.state.winner} is winner!\n          </span>\n\n          <GameBoard \n            btnSettings={this.getSettings()} \n            getSquares={this.getSquares}\n            squares={this.state.squares}\n            resetField={this.resetField}\n          />\n        </div>\n        \n        <WinnersTable winners={winners} />\n      </div>\n    );\n  }\n}\n\n\nexport default Game;","import {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport {fetchWinners, setUsername, fetchSettings, addWinner} from '../redux/actions';\nimport Game from './Game';\n\nfunction mapStateToProps(state) {\n  return {\n    settings: state.settings,\n    winners: state.winners,\n    userName: state.userName,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchSettings: bindActionCreators(fetchSettings, dispatch),\n    fetchWinners: bindActionCreators(fetchWinners, dispatch),\n    setName: userName => dispatch(setUsername(userName)),\n    addWinner: name => dispatch(addWinner(name))\n  };\n}\n\nconst GameContainer = connect(mapStateToProps, mapDispatchToProps)(Game);\nexport default GameContainer;","import React from 'react';\nimport './App.css';\nimport {createStore, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {reducer} from './redux/reducer';\nimport {Provider} from \"react-redux\";\nimport GameContainer from './components/GameContainer';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <GameContainer />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}