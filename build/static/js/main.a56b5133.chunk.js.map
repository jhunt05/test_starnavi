{"version":3,"sources":["redux/actions.js","redux/reducer.js","components/Panel.js","components/GameBoard.js","components/WinnersTable.js","components/Game.js","components/GameContainer.js","App.js","index.js"],"names":["ACTIONS","LOAD_SETTINGS","LOAD_WINNERS","ADD_WINNER","SET_USERNAME","fetchSettings","dispatch","getState","fetch","then","response","json","responseJson","settings","type","payload","fetchWinners","winners","initialState","userName","loading","error","Panel","props","onInputChange","gameMode","onSelectChange","game","startPlaying","getTimerId","squares","className","value","onChange","required","disabled","placeholder","event","target","onClick","preventDefault","winnerLabel","document","querySelector","btn","select","input","style","opacity","backgroundColor","timerId","setInterval","delay","alert","GameBoard","chooseBtn","querySelectorAll","length","getSquares","prevProps","this","btnSettings","buttons","Array","field","fill","map","button","index","key","React","Component","WinnersTable","winnersToDisplay","slice","item","winner","id","date","Game","setState","isPlaying","sendWinnerToServer","method","headers","body","JSON","stringify","Date","toUTCString","success","catch","console","state","random","Math","floor","getSettings","resetGame","playBtn","clearInterval","innerHTML","addEventListener","setTimeout","rand","userScore","pcScore","push","addWinner","chooseWinner","easyMode","normalMode","hardMode","setName","GameContainer","connect","bindActionCreators","name","store","createStore","action","newWinner","applyMiddleware","thunk","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a56b5133.chunk.js","sourcesContent":["export const ACTIONS = {\n  LOAD_SETTINGS: 'LOAD_SETTINGS',\n  LOAD_WINNERS: 'LOAD_WINNERS',\n  ADD_WINNER: 'ADD_WINNER',\n  SET_USERNAME: 'SET_USERNAME',\n};\n\nexport function loadSettings(settings) {\n  return {\n    type: ACTIONS.LOAD_SETTINGS,\n    payload: settings\n  };\n};\n\nexport function loadWinners(winners) {\n  return {\n    type: ACTIONS.LOAD_WINNERS,\n    payload: winners\n  };\n};\n\nexport function addWinner(name) {\n  return {\n    type: ACTIONS.ADD_WINNER,\n    payload: name\n  }\n};\n\nexport function setUsername(name) {\n  return {\n    type: ACTIONS.SET_USERNAME,\n    payload: name,\n  };\n};\n\nexport const fetchSettings = () => (dispatch, getState) => {\n  return fetch('http://starnavi-frontend-test-task.herokuapp.com/game-settings')\n    .then(response => response.json())\n    .then(responseJson => {\n      dispatch(loadSettings(responseJson));\n    })\n};\n\nexport const fetchWinners = () => (dispatch, getState) => {\n  return fetch('http://starnavi-frontend-test-task.herokuapp.com/winners')\n    .then(response => response.json())\n    .then(responseJson => {\n      dispatch(loadWinners(responseJson));\n    })\n};","import {ACTIONS} from './actions';\n\nconst initialState = {\n  settings: [],\n  winners: [],\n  userName: '',\n  loading: false,\n  error: null\n}\n\nfunction addWinner(name) {\n  return {\n    'winner': name,\n    'date': new Date().toUTCString(),\n    'id': Math.random(),\n  }\n}\n\nexport function reducer(state = initialState, action) {\n  switch(action.type) {\n    case ACTIONS.LOAD_SETTINGS: \n      return {\n        ...state,\n        loading: false,\n        settings: action.payload,\n      }\n    case ACTIONS.LOAD_WINNERS: \n      return {\n        ...state,\n        loading: false,\n        winners: action.payload,\n      }\n    case ACTIONS.SET_USERNAME: \n    return {\n      ...state,\n      userName: action.payload,\n    }\n    case ACTIONS.ADD_WINNER:\n      let newWinner = addWinner(action.payload);\n      return {\n        ...state,\n        winners: [...state.winners, newWinner],\n      }\n    default:\n      return state;\n  }\n}","import React from 'react';\n\nfunction Panel(props) {\n  const {\n    onInputChange,\n    gameMode,\n    onSelectChange,\n    game,\n    settings,\n    userName,\n    startPlaying,\n    getTimerId,\n    squares\n  } = props;\n\n  const gameStart = (event) => {\n    event.preventDefault();\n    startPlaying();\n\n    const winnerLabel = document.querySelector('.winner');\n    const btn = document.querySelector('.ui.button');\n    const select = document.querySelector('.select');\n    const input = document.querySelector('.input');\n\n    if (userName && gameMode !== \"Pick game mode\") {\n      btn.disabled = 'true';\n      select.disabled = 'true';\n      input.disabled = 'true';\n      winnerLabel.style.opacity = 0;\n      for (let square of squares) {\n        square.style.backgroundColor = '';\n      }\n    \n      let timerId = setInterval(game, settings.delay);\n      getTimerId(timerId);\n    } else {\n      alert('Enter info')\n    }\n\n    return;\n  }  \n\n  return (\n    <form className=\"gameForm\">\n      <select\n        value={gameMode}\n        onChange={onSelectChange}\n        required\n        className=\"select\"\n      >\n        <option value=\"Pick game mode\" disabled>Pick game mode</option>\n        <option value=\"Easy\">Easy</option>\n        <option value=\"Medium\">Medium</option>\n        <option value=\"Hard\">Hard</option>\n      </select>\n\n      <input \n        className=\"input\"\n        required\n        type=\"text\" \n        placeholder=\"Enter your name\"\n        onChange={(event) => onInputChange(event.target.value)}\n      />\n\n      <button \n        type=\"submit\" \n        onClick={gameStart}\n        className=\"ui button\"\n      >\n        Play\n      </button>\n    </form>\n  );\n}\n\nexport default Panel;","import React from 'react';\n\nclass GameBoard extends React.Component {\n  componentDidUpdate(prevProps) {\n    if (this.props.squares === prevProps.squares) {\n      this.chooseBtn();\n    } else {\n      return;\n    }\n  }\n\n  chooseBtn = () => {\n    let btn = document.querySelectorAll('.boardBtn');\n\n    if (btn.length !== 0) {\n      this.props.getSquares(btn);\n    } \n  }\n\n  render() {\n    const {btnSettings} = this.props;\n    let buttons = Array(btnSettings.field).fill(null);\n\n    switch(btnSettings.field) {\n      case 5: \n        return (\n          <div className=\"gameBoard\">\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n          </div>\n        );\n      case 10: \n        return (\n          <div className=\"gameBoard\">\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n          </div>\n        );\n      case 15: \n        return (\n          <div className=\"gameBoard\">\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n            <div className=\"boardRow\">\n              {buttons.map((button, index) => <button key={index} className=\"boardBtn\"></button>)}\n            </div>\n          </div>\n        );\n      default: \n        return <span className=\"startGameSpan\">Enter info to start a game</span>\n    }\n  }\n}\n\nexport default GameBoard;","import React from 'react';\n\nconst WinnersTable = (props) => {\n  const {winners} = props;\n  const winnersToDisplay = winners.slice(-4);\n\n  return (\n    <div className='leadersTable'>\n      <h2>Leader Board</h2>\n      <table className='ui celled table'>\n        <tbody>\n          {winnersToDisplay.map(item => (\n            <tr \n              className={item.winner === 'Computer' ? 'negativeResult' : 'positiveResult'} \n              key={item.id}\n            >\n              <td>{item.winner}</td>\n              <td>{item.date}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default WinnersTable;","import React from 'react';\nimport Panel from './Panel';\nimport GameBoard from './GameBoard';\nimport WinnersTable from './WinnersTable';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gameMode: 'Pick game mode',\n      isPlaying: false,\n      squares: [],\n      winner: null,\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchSettings();\n    this.props.fetchWinners();\n  }\n\n  onSelectChange = (event) => {\n    this.setState({\n      gameMode: event.target.value,\n    })\n  }\n\n  startPlaying = () => {\n    this.setState({\n      isPlaying: true,\n    })\n  }\n\n  getTimerId = (id) => {\n    this.setState({\n      timerId: id,\n    });\n  }\n\n  sendWinnerToServer = (userName) => {\n    return fetch('http://starnavi-frontend-test-task.herokuapp.com/winners', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        winner: userName,\n        date: new Date().toUTCString(),\n      })\n    }).then((response) => response.json())\n      .then((responseJson) => {\n        return responseJson.success;\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  game = () => {\n    const { squares } = this.state;\n    let buttons = [...squares];\n    let random = Math.floor(Math.random() * buttons.length);\n    const settings = this.getSettings();\n\n    const rand = (buttons) => {  \n      buttons[random].style.backgroundColor = 'blue';    \n      buttons[random].addEventListener('click', () => {\n        buttons[random].style.backgroundColor = 'green';\n      })\n  \n      setTimeout(() => {\n        if (buttons[random].style.backgroundColor === 'blue') {\n          buttons[random].style.backgroundColor = 'red';\n          buttons[random].disabled = 'true';\n        }\n      }, settings.delay);\n    }\n\n    const resetGame = (buttons) => {\n      const playBtn = document.querySelector('.ui.button');\n      const select = document.querySelector('.select');\n      const input = document.querySelector('.input');\n      const winnerLabel = document.querySelector('.winner');\n\n      winnerLabel.style.opacity = 1;\n      clearInterval(this.state.timerId);\n      playBtn.innerHTML = 'Play again';\n      playBtn.disabled = false;\n      select.disabled = false;\n      input.disabled = false;\n      input.value = '';\n    }\n    \n    const chooseWinner = (buttons) => {\n      let userScore = [];\n      let pcScore = [];\n      const {userName} = this.props;\n  \n      for (let button of buttons) {\n        if (button.style.backgroundColor === 'green') {\n          userScore.push(1);\n        } else if (button.style.backgroundColor === 'red') {\n          pcScore.push(1);\n        }\n      }\n  \n      if (userScore.length >= buttons.length / 2) {\n        this.props.addWinner(userName);\n        this.setState({\n          isPlaying: false,\n          winner: userName,\n        })\n        this.sendWinnerToServer(userName);\n        resetGame(buttons);\n      } else if (pcScore.length >= buttons.length / 2) {\n        this.props.addWinner('Computer');\n        this.setState({\n          isPlaying: false,\n          winner: 'Computer',\n        })\n        this.sendWinnerToServer('Computer');\n        resetGame(buttons);\n      } else {\n        return;\n      }\n    }\n    \n    if (buttons[random].style.backgroundColor === 'blue' ||\n        buttons[random].style.backgroundColor === 'red' ||\n        buttons[random].style.backgroundColor === 'green') {\n          return;\n    } else if (this.state.isPlaying) {\n      rand(buttons);\n      chooseWinner(buttons);\n    }\n\n    this.setState({\n      squares: buttons,\n    })\n  };\n\n  getSquares = (btn) => {\n    this.setState({\n      squares: btn,\n    })\n  }\n\n  getSettings = () => {\n    switch(this.state.gameMode) {\n      case \"Easy\": \n        return this.props.settings.easyMode\n      case \"Medium\": \n        return this.props.settings.normalMode\n      case \"Hard\": \n        return this.props.settings.hardMode\n      default:\n        return {\n          field: 0,\n          delay: 0,\n        }\n    }\n  }\n      \n  render() {\n    const { \n      userName, \n      winners, \n      setName,\n    } = this.props;\n\n    return (\n      <div className=\"container\">\n        <div className=\"game\">\n          <Panel \n            onInputChange={setName} \n            gameMode={this.state.gameMode}\n            onSelectChange={this.onSelectChange}\n            game={this.game}\n            settings={this.getSettings()} \n            userName={userName}\n            isPlaying={this.state.isPlaying}\n            startPlaying={this.startPlaying}\n            getTimerId={this.getTimerId}\n            squares={this.state.squares}\n          />\n\n          <span className=\"winner\">\n            {this.state.winner} is winner!\n          </span>\n\n          <GameBoard \n            btnSettings={this.getSettings()} \n            getSquares={this.getSquares}\n            squares={this.state.squares}\n          />\n        </div>\n        \n        <WinnersTable winners={winners} />\n      </div>\n    );\n  }\n}\n\n\nexport default Game;","import {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport {fetchWinners, setUsername, fetchSettings, addWinner} from '../redux/actions';\nimport Game from './Game';\n\nfunction mapStateToProps(state) {\n  return {\n    settings: state.settings,\n    winners: state.winners,\n    userName: state.userName,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchSettings: bindActionCreators(fetchSettings, dispatch),\n    fetchWinners: bindActionCreators(fetchWinners, dispatch),\n    setName: userName => dispatch(setUsername(userName)),\n    addWinner: name => dispatch(addWinner(name))\n  };\n}\n\nconst GameContainer = connect(mapStateToProps, mapDispatchToProps)(Game);\nexport default GameContainer;","import React from 'react';\nimport './App.css';\nimport {createStore, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {reducer} from './redux/reducer';\nimport {Provider} from \"react-redux\";\nimport GameContainer from './components/GameContainer';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <GameContainer />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}